---
title: "Lab 5: Uncertainty, Samples, and Population"
author: "Ednita Tavarez-Jimenez"
Date: "October 6, 2022"
output: 
    html_document:
    toc: true
    toc_float: true
    theme: "journal"
---

## Exponential Functions 

**Q1: Show the R code you used to create exp_fun()**


```{r setup}
require(here)
here()
dat_dis = read.csv(
  here("data", "dispersal.csv"))

ricker_fun = function(x, a, b) 
{
  return(a * x * exp(-b * x))
}

exp_fun = function(x, a, b) 
  
{
  return(a * exp(-b * x))
}
curve(
  exp_fun(x, 1, 1), 
  from = 0, to = 10, add = FALSE, 
  main = "Exp Function: a = 1, b = 1",
  ylab = "f(x)", xlab = "x")


```

**Q2: In your lab report, include a single figure containing four negative exponential curves with the following parameter values and line colors/textures:**

curve 1: a = 1.9, b = 0.1, line color = black, line texture = solid
curve 2: a = 1.9, b = 0.3, line color = black, line texture = dotted
curve 3: a = 1.2, b = 0.2, line color = red, line texture = solid
curve 4: a = 1.2, b = 0.4, line color = red, line texture = dotted


```{r}
exp_fun = function(x, a, b) 
  
{
  return(a * exp(-b * x))
}
Curve_1 <- curve(exp_fun(x, 1.9, .1), 
  from = 0, to = 50, add = FALSE, 
  main = "Four Curves: a = 1.2 - 1.9, b = 0.1 - 0.4",
  ylab = "f(x)", xlab = "x",col = "black", lty = "solid" )

Curve_2 <- curve(exp_fun(x, 1.9, .3), 
  from = 0, to = 50, add = TRUE, 
  main = "",
  ylab = "f(x)", xlab = "x",col = "black", lty = "dotted" )

Curve_3 <- curve(exp_fun(x, 1.2, .2), 
  from = 0, to = 50, add = TRUE, 
  main = "Exp Function: a = 1.2, b = 0.2",
  ylab = "f(x)", xlab = "x",col = "red", lty = "solid" )

Curve_4 <- curve(exp_fun(x, 1.2, .4), 
  from = 0, to = 50, add = TRUE, 
  main = "Exp Function: a = 1.2, b = 0.4",
  ylab = "f(x)", xlab = "x",col = "red", lty = "dotted" )
```



**Q3: Observe how the curves vary as you change the two parameters’ values. Qualitatively describe what happens to the curve as you vary parameter a**

As you vary parameter a, the curve larger or smaller. 

**Q4: Observe how the curves vary as you change the two parameters’ values. Qualitatively describe what happens to the curve as you vary parameter b**

As you vary parameter b, the curve gets bigger and smaller.

## Ricker Functions

**Q5 (6 pts.): In your lab report, include a single plot containing 6 Ricker curves with these parameter values:**

curve 1: a = 25, b = 0.2, line color = black, line texture = solid
curve 2: a = 20, b = 0.2, line color = black, line texture = dotted
curve 3: a = 10, b = 0.2, line color = black, line texture = dotted
curve 4: a = 75, b = 0.3, line color = red, line texture = solid
curve 5: a = 50, b = 0.3, line color = red, line texture = dotted
curve 6: a = 40, b = 0.3, line color = red, line texture = dotted

```{r}
ricker_fun = function(x, a, b) 
{
  return(a * x * exp(-b * x))
}
Curve_1r <- curve(ricker_fun(x, 25, .2), 
  from = 0, to = 25, add = FALSE,
  main = "six Curves: a = 10 - 75, b = 0.2 - 0.3", ylim = c(0,95),
  ylab = "f(x)", xlab = "x",col = "black", lty = "solid")

Curve_2r <- curve(ricker_fun(x, 20, .2), 
  from = 0, to = 90, add = TRUE,
  ylab = "f(x)", xlab = "x",col = "black", lty = "dotted" )

Curve_3r <- curve(ricker_fun(x, 10, .2), 
  from = 0, to = 90, add = TRUE,
  ylab = "f(x)", xlab = "x",col = "black", lty = "dotted" )

Curve_4r <- curve(ricker_fun(x, 75, .3), 
  from = 0, to = 90, add = TRUE, n = 1000,
  ylab = "f(x)", xlab = "x",col = "red", lty = "solid" )

Curve_5r <- curve(ricker_fun(x, 50, .3), 
  from = 0, to = 50, add = TRUE,
  ylab = "f(x)", xlab = "x",col = "red", lty = "dotted" )

curve_6r <- curve(ricker_fun(x, 40, .3), 
  from = 0, to = 50, add = TRUE,
  ylab = "f(x)", xlab = "x",col = "red", lty = "dotted" )
```
**Q6 (2 pts.): Observe how the curves vary as you change the two parameters’ values. Qualitatively describe what happens to the curve as you vary parameter a**

As you change parameter a, the curves get skinnier or wider.


**Q7 (2 pts.): Observe how the curves vary as you change the two** parameters’ values. Qualitatively describe what happens to the curve as you vary parameter b

When variable for b changed the curve goes higher or lower. 

## Salamander Models


**Q8: Linear Model. Provide the values of the slope, x1, and y1 parameters you chose. Briefly describe how you chose the values.**

I chose a = 0.07,and b = -0.00005, I chose based on where the points were and what I thought you be the better fit. 

**Q9: In your lab report, include a scatterplot of the salamander data with your fitted linear model.**

```{r pressure, echo=FALSE}


line_point_slope = function(x, x1, y1, slope)
  {
    get_y_intercept = 
      function(x1, y1, slope) 
        return(-(x1 * slope) + y1)
    
    linear = 
      function(x, yint, slope) 
        return(yint + x * slope)
    
    return(linear(x, get_y_intercept(x1, y1, slope), slope))
}

linear <- plot(
    dat_dis$dist.class,
    dat_dis$disp.rate.ftb,
    xlim = c(0, 1500),
    xlab = "distance class", 
    ylab = "standardized dispersal rate", 
    main = "Marbled Salamander - first time breeders\ linear model")
  curve(line_point_slope(x, 1500, 0.07, -0.00005), add = TRUE, col = "red")
  
 linear_predicted <- line_point_slope(dat_dis$dist.class, 1500, 0.07, -0.00005) 
 Observed <- dat_dis$disp.rate.ftb
resids_linear <- linear_predicted - Observed

```


**Q10: Exponential Model. Provide the values of the a and b. Briefly describe how you chose the values.**

a = .9, b = 0.005)

**Q11: In your lab report, include a scatterplot of the salamander data with your fitted exponential model.**

```{r}



line_point_slope = function(x, x1, y1, slope)
  {
    get_y_intercept = 
      function(x1, y1, slope) 
        return(-(x1 * slope) + y1)
    
    linear = 
      function(x, yint, slope) 
        return(yint + x * slope)
    
    return(linear(x, get_y_intercept(x1, y1, slope), slope))
}

exp_fun = function(x, a, b) 
  
{
  return(a * exp(-b * x))
}

plot(
    dat_dis$dist.class,
    dat_dis$disp.rate.ftb,
    xlim = c(0, 1500),
    xlab = "distance class", 
    ylab = "standardized dispersal rate", 
    main = "Marbled Salamander - first time breeders\n(Bad) Exp_Fun model")
curve(exp_fun(x, .9, .005), 
  from = 0, to = 1500, add = TRUE, n = 1000,
  ylab = "f(x)", xlab = "x",col = "blue", lty = "solid" )

 exp_predicted <- line_point_slope(dat_dis$dist.class, 1500, .9, .005) 
 Observed <- dat_dis$disp.rate.ftb
 resids_exp <- exp_predicted - Observed
```


**Q12: Ricker Model Provide the values of the a and b. Briefly describe how you chose the values.**

a = .005, b= 1/300

**Q13: In your lab report, include a scatterplot of the salamander data with your fitted ricker model.**

```{r}

line_point_slope = function(x, x1, y1, slope)
  {
    get_y_intercept = 
      function(x1, y1, slope) 
        return(-(x1 * slope) + y1)
    
    linear = 
      function(x, yint, slope) 
        return(yint + x * slope)
    
    return(linear(x, get_y_intercept(x1, y1, slope), slope))
}

ricker_fun = function(x, a, b) 
{
  return(a * x * exp(-b * x))
}
plot(
    dat_dis$dist.class,
    dat_dis$disp.rate.ftb,
    xlim = c(0, 1500),
    xlab = "distance class", 
    ylab = "standardized dispersal rate", 
    main = "Marbled Salamander - first time breeders\ Ricker model")
curve(ricker_fun(x, .005, 1/300), 
  from = 0, to = 1500, add = TRUE, ylim = c(0,1500),
  ylab = "f(x)", xlab = "x",col = "black", lty = "solid")

 ricker_predicted <- line_point_slope(dat_dis$dist.class, 1500, .005, 1/300) 
 Observed <- dat_dis$disp.rate.ftb
 resids_ricker <- exp_predicted - Observed
```
## Salamander Model Residuals

Calculate the residuals for your three fitted models and store them in a data.frame

The columns containing the residuals should have the following names:
“resids_linear”
“resids_exp”
“resids_ricker”


**Q14 : Show the R code you used to create your data frame of model residuals.**

```{r}
 linear_predicted <- line_point_slope(dat_dis$dist.class, 1500, 0.07, -0.00005) 
 Observed <- dat_dis$disp.rate.ftb
resids_linear <- linear_predicted - Observed

 exp_predicted <- line_point_slope(dat_dis$dist.class, 1500, .9, .005) 
 Observed <- dat_dis$disp.rate.ftb
 resids_exp <- exp_predicted - Observed
 
ricker_predicted <- line_point_slope(dat_dis$dist.class, 1500, .005, 1/300) 
 Observed <- dat_dis$disp.rate.ftb
 resids_ricker <- exp_predicted - Observed

```


**Q15 (3 pts.): In your lab report, include histograms of the residuals for each of your three models. You may create a single figure with three panels, or include three separate figures.**

For some reason the exp and ricker histograms look exactly the same.

```{r histograms}

hist(resids_linear, xlab = "Linear", col = "pink")
hist(resids_exp, xlab = "Exp", col = "steel blue")
hist(resids_ricker, xlab = "Ricker", col = " dark green")


```

