shapiro.test(residuals(fit4))
#Shapiro Test fit 5
shapiro.test(residuals(fit5))
knitr::kable(coef(summary()), digits = 2)
require(here)
library(palmerpenguins)
require(palmerpenguins)
here()
ginkgo <- read.csv(here("data", "ginkgo_data_2022.csv"))
require(here)
library(palmerpenguins)
require(palmerpenguins)
here()
ginkgo <- read.csv(here("data", "ginkgo_data_2022.csv"))
dat_delo <- read.csv(here("data", "delomys.csv"))
dat_pen <- penguins
require(palmerpenguins)
plot(body_length ~ body_mass, data = dat_delo, main = "Delomys Body Mass and Body Length Histogram", xlab = "Body Mass", ylab = "Body Length", col = "black")
#Histogram of Penguin Body Mass and Body Length
par(mfrow = c(2, 1))
hist(dat_pen$body_mass_g, main = "Delomys Body Mass Histogram", xlab = "Body Mass", col = "pink")
hist(dat_delo$body_length, xlab = "Body Length",main = "Delomys Penguin Body Length Histogram", col = "steelblue")
dat_delo_1 = lm(body_mass ~ body_length, data = dat_delo)
summary(dat_delo_1)
shapiro.test(residuals(dat_delo_1))
# Conditional Box Plots
#1. Conditional boxplot of body mass, conditioned on species (column binomial)
par(mfrow = c(3, 1), mar = c(5,3,3,1))
boxplot(body_mass~binomial,data = dat_delo, main = "Delomys Body Mass Conditioned on Species", col = "red", xlab = "Species", ylab = "Body Mass")
boxplot(body_mass~sex,data = dat_delo, main = "Delomys Body Mass Conditioned on Sex", col = "pink", xlab = "Sex", ylab = "Body Mass")
boxplot(body_mass~binomial+sex,data = dat_delo, main = "Delomys Body Mass Conditioned on Species & Sex", col = "steelblue", xlab = "Species", ylab = "Body Mass", names = c("Female\n Delomys\n Dorsalis", "Female\n Delomys\n Sublineatus", "Male\n Delomys\n Dorsalis", "Male\n Delomys\n Sublineatus"), las = 2)
#Building models for ANOVA
fit1 =
lm(
formula = body_length ~ body_mass,
data = dat_delo)
coef(fit1)
slope_observed = coef(fit1)
plot(
body_length ~ body_mass, data = dat_delo,
main = "",
xlab = "Body Length",
ylab = "Body Mass")
abline(fit1)
fit2  =
lm(
formula = body_mass ~ sex,
data = dat_delo)
anova(fit2)
fit3 =
lm(
formula = body_mass ~ binomial,
data = dat_delo)
anova(fit3)
fit4 =
lm(
formula = body_mass ~ sex + binomial,
data = dat_delo)
anova(fit4)
fit5 =
lm(
formula = body_mass ~ sex * binomial,
data = dat_delo)
anova(fit5)
#Histograms of model residuals
par(mfrow = c(5, 1), mar = c(4,3,3,1))
hist(residuals(fit1), main = "Histogram of residuals fit 1", xlab = "Residuals (fit 1)", col = "pink")
hist(residuals(fit2), main = "Histogram of residuals fit 2", xlab = "Residuals (fit 2)", col = "steelblue")
hist(residuals(fit3), main = "Histogram of residuals fit 3", xlab = "Residuals (fit 3)", col = "red")
hist(residuals(fit4), main = "Histogram of residuals fit 4", xlab = "Residuals (fit 4)")
hist(residuals(fit5), main = "Histogram of residuals fit 5", xlab = "Residuals (fit 5)", col = "green")
#Shapiro Test fit 1
shapiro.test(residuals(fit1))
#Shapiro Test fit 2
shapiro.test(residuals(fit2))
#Shapiro Test fit 3
shapiro.test(residuals(fit3))
#Shapiro Test fit 4
shapiro.test(residuals(fit4))
#Shapiro Test fit 5
shapiro.test(residuals(fit5))
knitr::kable(coef(summary(fit1)), digits = 2)
knitr::kable(coef(summary(fit1)), digits = 2)
coef(fit_1)
knitr::kable(coef(summary(fit1)), digits = 2)
coef(fit1)
slope_observed = coef(fit1)[2]
coef(fit1)
coef(fit1)
knitr::kable(coef(summary(fit1)), digits = 2)
knitr::kable(coef(summary(fit2)), digits = 2)
coef(fit2)
knitr::kable(coef(summary(fit3)), digits = 2)
coef(fit3)
coef(fit2)
fit6 =
lm(
formula = body_mass ~ binomial,
data = dat_delo)
coef(fit6)
summary(fit6)
require(palmerpenguins)
require(here)
require(boot)
dat_pen = droplevels(subset(penguins, species != "Gentoo"))
{
boxplot(
flipper_length_mm ~ species, data = dat_pen,
ylab = "Flipper length (mm)")
}
#Parametric Two-Sample Test
t.test(flipper_length_mm ~ species, data = dat_pen, alternative = "less")
#Bootstrap Two-Sample Test
#install.packages("simpleboot")
require(simpleboot)
#Use two.boot
dat_ad <- subset(dat_pen,species == "Adelie", select = "flipper_length_mm")
dat_chin <- subset(dat_pen, species == "Chinstrap", select = "flipper_length_mm")
pen_boot <- two.boot(na.omit(dat_ad$flipper_length_mm), na.omit(dat_chin$flipper_length_mm), FUN = mean , R= 10000)
mean(quantile(
pen_boot$t,
c(0.025, 0.975)))
median(quantile(
pen_boot$t,
c(0.025, 0.975)))
require(here)
dat_bird <- read.csv(here("data", "bird.sub.csv"))
dat_hab <- read.csv(here("data", "hab.sub.csv"))
birdhab <- merge(dat_bird, dat_hab)
dim(birdhab)
fit_1 <- lm(birdhab$BRCR ~ birdhab$ls, data = birdhab)
#Build Simulation
fit_1_coefs = coefficients(fit_1)
str(fit_1_coefs)
fit_1_summary = summary(fit_1)
str(fit_1_summary)
fit_1_summary$sigma
int_obs <- fit_1_coefs[1]
slope_obs <- fit_1_coefs [2]
sd_obs <- fit_1_summary$sigma
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(5, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
linear = function(x, y_int, slope)
{
return(x*slope + y_int)
}
linear(x = 1, y_int = 1, slope = 1)
linear(x = 3:5, y_int = 1, slope = 1)
linear(x = 3:5, y_int = -1, slope = 1)
linear(x = 3:5, y_int = -1, slope = 0.01)
linear_simulator = function (x, y_int, slope, st_dev)
{
int_1 <- linear(x, y_int, slope)
noise <- rnorm(n = length(x), mean = 0, sd = st_dev)
noisy_line <- int_1 + noise
return(noisy_line)
}
linear_sim_fit = function(x, slope, y_int, st_dev)
{
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l', xlab = 'Sample size', ylab = 'Power')
fit_lowess_50 = loess(power ~ sample_size, data = sim_sample_size, span = 0.5)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
power ~ sample_size, data = sim_sample_size,
type = 'p', xlab = 'Sample size', ylab = 'Power', col = "red", main = "Ednita's LOWESS Graph")
points(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_50, newdata = newdata_sample_size),
type = "l", add = TRUE,
ylab = "Statistical Power", xlab = "Sample Size", lty = "solid")
require(here)
here()
dat_dispersal = read.csv(
here("data", "dispersal.csv"))
line_point_slope = function(x, x1, y1, slope)
{
get_y_intercept =
function(x1, y1, slope)
return(-(x1 * slope) + y1)
linear =
function(x, yint, slope)
return(yint + x * slope)
return(linear(x, get_y_intercept(x1, y1, slope), slope))
}
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
main = "Ednita's Marbled Salamander Plot - first time breeders")
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
exp_fun = function(x, a, b)
{
return(a * exp(-b * x))
}
fit_ricker_nls = nls(
disp.rate.ftb ~ ricker_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_ricker_nls)
#first step is to make a data frame
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
#plot the results of our model
lines(predict(fit_ricker_nls, newdata = dist_newdata))
legend(
"topleft",
legend = c("nls fit", "guess"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
curve(ricker_fun(x, .005, 1/300),
from = 0, to = 1500, add = TRUE, ylim = c(0,1500),
ylab = "f(x)", xlab = "x",col = "pink", lty = "dotted")
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$GCKI_pres = dat_all$GCKI > 0
# Hermit warbler presence/absence
dat_all$GCKI_pres = dat_all$GCKI > 0
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$GCKI_pres = dat_all$GCKI > 0
# Hermit warbler presence/absence
dat_all$GCKI_pres = dat_all$GCKI > 0
# Create model fits
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_GCKI_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
summary(fit_gcki_both_additive)
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$GCKI_pres = dat_all$GCKI > 0
# Hermit warbler presence/absence
dat_all$GCKI_pres = dat_all$GCKI > 0
# Create model fits
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
summary(fit_gcki_both_additive)
n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
#new data.frame of total basal area values for prediction. Call it ba_newdata.
ba_newdata = data.frame(
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n))
slope_newdata$gcki_predicted =
predict(
fit_gcki_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$gcki_predicted =
predict(
fit_gcki_ba_tot,
newdata = ba_newdata,
type = "response"
)
#Compare models using AIC
AIC(
fit_gcki_ba_tot,
fit_gcki_slope,
fit_gcki_both_additive,
fit_gcki_both_interactive)
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
#3D plot
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "steelblue",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
#3D plot
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "pink",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
# Presence/absence data, translucent points:
plot(
gcki_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(hewa_predicted ~ slope, data = slope_newdata)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "HEWA presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
#3D plot
require(rgl)
rgl::persp3d(
x = ba.tot,
y = slope,
z = z_gcki_add,
col = "pink",
xlab = "Basal Area",
ylab = "Slope",
zlab = "Pr(present)",
alpha = 0.4)
rglwidget()
coef(fit_gcki_ba_tot)
coef(fit_gcki_slope)
coef(fit_gcki_both_additive)
coef(fit_gcki_both_additive)
View(fit_gcki_ba_tot)
View(fit_gcki_both_additive)
View(z_gcki_add)
View(z_gcki_int)
summary(fit_gcki_both_additive)
summary(coef(fit_gcki_both_additive))
summary(fit_gcki_both_additive)
